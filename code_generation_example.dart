library;

import 'package:json_annotation/json_annotation.dart';
import 'package:json_annotation_tools/json_annotation_tools.dart';

// This would normally be generated by build_runner
// part 'code_generation_example.g.dart';

/// üöÄ REVOLUTIONARY APPROACH: Just Add One Annotation!
/// 
/// Before: Manual getSafe() calls everywhere (hassle!)
/// After: One annotation, automatic safe parsing! (amazing!)

// ===================================================================
// üéØ BASIC EXAMPLE: Minimal Setup
// ===================================================================

@JsonSerializable()
@SafeJsonParsing() // ‚Üê Magic happens with just this line!
class User {
  final int id;
  final String name;
  final String email;
  final int? age; // Nullable field handled automatically
  final bool isActive;
  final DateTime createdAt;

  User({
    required this.id,
    required this.name,
    required this.email,
    this.age,
    required this.isActive,
    required this.createdAt,
  });

  // Standard json_serializable methods (unchanged)
  factory User.fromJson(Map<String, dynamic> json) => _$UserFromJson(json);
  Map<String, dynamic> toJson() => _$UserToJson(this);

  // üöÄ AUTO-GENERATED by @SafeJsonParsing annotation:
  // factory User.fromJsonSafe(Map<String, dynamic> json) => _$UserFromJsonSafe(json);
  // 
  // Generated code will look like:
  // static User fromJsonSafe(Map<String, dynamic> json) {
  //   return User(
  //     id: json.getSafeInt('id'),
  //     name: json.getSafeString('name'), 
  //     email: json.getSafeString('email'),
  //     age: json.getNullableSafeInt('age'),
  //     isActive: json.getSafeBool('isActive'),
  //     createdAt: json.getSafeDateTime('createdAt'),
  //   );
  // }
}

// ===================================================================
// üîß ADVANCED EXAMPLE: Custom Configuration
// ===================================================================

@JsonSerializable()
@SafeJsonParsing(
  nullSafety: true,           // Handle nullable fields smartly
  validateRequiredKeys: true, // Check required keys exist first
  methodName: 'parseJsonSafe' // Custom method name
)
class Product {
  final String id;
  final String name;
  final double price;
  final ProductCategory category;
  final List<String> tags;
  final DateTime? expiresAt;

  Product({
    required this.id,
    required this.name,
    required this.price,
    required this.category,
    required this.tags,
    this.expiresAt,
  });

  factory Product.fromJson(Map<String, dynamic> json) => _$ProductFromJson(json);
  Map<String, dynamic> toJson() => _$ProductToJson(this);

  // üöÄ AUTO-GENERATED as: Product.parseJsonSafe(Map<String, dynamic> json)
}

enum ProductCategory { electronics, clothing, books, food }

// ===================================================================
// üé® ENHANCED EXAMPLE: Field-Level Customization
// ===================================================================

@JsonSerializable()
@SafeJsonParsing()
class OrderItem {
  final String productId;
  
  @SafeJsonField(
    description: 'Number of items ordered',
    expectedFormat: 'Positive integer (1, 2, 3, ...)',
    commonValues: ['1', '2', '5', '10'],
  )
  final int quantity;
  
  @SafeJsonField(
    description: 'Item price in USD',
    expectedFormat: '12.99, 0.50, 1000.00',
  )
  final double unitPrice;
  
  @JsonKey(name: 'discount_percent')
  @SafeJsonField(
    description: 'Discount percentage',
    expectedFormat: '0.0 to 100.0 (e.g., 25.5 for 25.5%)',
    commonValues: ['0', '10', '25', '50'],
  )
  final double? discountPercent;

  OrderItem({
    required this.productId,
    required this.quantity,
    required this.unitPrice,
    this.discountPercent,
  });

  factory OrderItem.fromJson(Map<String, dynamic> json) => _$OrderItemFromJson(json);
  Map<String, dynamic> toJson() => _$OrderItemToJson(this);

  // üöÄ AUTO-GENERATED with enhanced error messages including field descriptions!
}

// ===================================================================
// üî• REAL-WORLD USAGE EXAMPLES
// ===================================================================

void main() async {
  print('üöÄ Code Generation Examples for @SafeJsonParsing');
  print('=' * 60);

  // Example 1: Basic usage - just works!
  await basicUsageExample();
  
  // Example 2: Advanced error messages
  await advancedErrorExample();
  
  // Example 3: Integration with existing code
  await integrationExample();
}

Future<void> basicUsageExample() async {
  print('\nüìã EXAMPLE 1: Basic Usage (Zero Hassle!)');
  print('-' * 40);

  final jsonData = {
    'id': 123,
    'name': 'John Doe',
    'email': 'john@example.com',
    'age': 30,
    'isActive': true,
    'createdAt': '2024-01-15T10:30:00Z',
  };

  try {
    // üöÄ Just call the auto-generated method!
    // No manual getSafe() calls needed anywhere!
    final user = User.fromJsonSafe(jsonData);
    
    print('‚úÖ SUCCESS: Parsed user perfectly!');
    print('   Name: ${user.name}');
    print('   Email: ${user.email}');
    print('   Age: ${user.age}');
    print('   Active: ${user.isActive}');
    print('   Created: ${user.createdAt}');
  } catch (e) {
    print('‚ùå Error: $e');
  }
}

Future<void> advancedErrorExample() async {
  print('\nüîç EXAMPLE 2: Advanced Error Messages');
  print('-' * 40);

  // Problematic JSON with type mismatch
  final badJson = {
    'productId': 'ABC123',
    'quantity': '5',      // Should be int, got String
    'unitPrice': 29.99,
    'discount_percent': 'invalid', // Should be double, got String
  };

  try {
    final item = OrderItem.fromJsonSafe(badJson);
    print('‚úÖ SUCCESS: $item');
  } catch (e) {
    print('üö® DETAILED ERROR MESSAGE:');
    print(e.toString());
    print('\nüí° Notice how the error includes:');
    print('   ‚Ä¢ Exact field name that failed');
    print('   ‚Ä¢ Field description ("Number of items ordered")');
    print('   ‚Ä¢ Expected format ("Positive integer (1, 2, 3, ...)")');
    print('   ‚Ä¢ Common valid values');
    print('   ‚Ä¢ Copy-paste ready solutions');
  }
}

Future<void> integrationExample() async {
  print('\nüîó EXAMPLE 3: Integration with Existing Code');
  print('-' * 40);

  print('‚úÖ BACKWARD COMPATIBILITY:');
  print('   ‚Ä¢ Keep existing User.fromJson() - still works!');
  print('   ‚Ä¢ Add User.fromJsonSafe() - enhanced errors!');
  print('   ‚Ä¢ Zero breaking changes to existing code');
  print('   ‚Ä¢ Gradual migration possible');
  
  print('\nüöÄ DEVELOPER WORKFLOW:');
  print('   1. Add @SafeJsonParsing() annotation');
  print('   2. Run: dart run build_runner build');
  print('   3. Use .fromJsonSafe() for better errors');
  print('   4. That\'s it! No manual getSafe() calls needed!');
  
  print('\n‚ö° PERFORMANCE:');
  print('   ‚Ä¢ Same performance as manual getSafe() calls');
  print('   ‚Ä¢ Zero overhead during successful parsing');
  print('   ‚Ä¢ Enhanced errors only when needed');
  print('   ‚Ä¢ Code generated at build time, not runtime');
}

// ===================================================================
// üéØ COMPARISON: Before vs After
// ===================================================================

class UserBeforeCodeGeneration {
  final int id;
  final String name;
  final int? age;

  UserBeforeCodeGeneration({required this.id, required this.name, this.age});

  // üò§ BEFORE: Manual hassle everywhere!
  factory UserBeforeCodeGeneration.fromJsonSafe(Map<String, dynamic> json) {
    return UserBeforeCodeGeneration(
      id: json.getSafe('id', (v) => v as int),           // Manual
      name: json.getSafe('name', (v) => v as String),    // Manual
      age: json.getNullableSafe('age', (v) => v as int), // Manual
    );
  }
}

// üöÄ AFTER: With @SafeJsonParsing() - just add one annotation!
@JsonSerializable()
@SafeJsonParsing()
class UserAfterCodeGeneration {
  final int id;
  final String name; 
  final int? age;

  UserAfterCodeGeneration({required this.id, required this.name, this.age});

  factory UserAfterCodeGeneration.fromJson(Map<String, dynamic> json) => 
      _$UserAfterCodeGenerationFromJson(json);
  
  // üéâ AUTO-GENERATED: No manual work needed!
  // factory UserAfterCodeGeneration.fromJsonSafe(Map<String, dynamic> json) => 
  //     _$UserAfterCodeGenerationFromJsonSafe(json);
}

// ===================================================================
// üì¶ SETUP INSTRUCTIONS
// ===================================================================

/*

üîß SETUP (One-time):

1. Add to pubspec.yaml:
   dependencies:
     json_annotation_tools: ^0.0.3
     json_annotation: ^4.9.0
   
   dev_dependencies:
     build_runner: ^2.4.9
     json_serializable: ^6.8.0

2. Add @SafeJsonParsing() to your models:
   @JsonSerializable()
   @SafeJsonParsing()  // ‚Üê Add this line!
   class MyModel { ... }

3. Run code generation:
   dart run build_runner build

4. Use the generated safe methods:
   final model = MyModel.fromJsonSafe(json); // Enhanced errors!

‚úÖ That's it! No more manual getSafe() calls needed!

üéØ BENEFITS:
‚Ä¢ Zero hassle - just add one annotation
‚Ä¢ Automatic safe parsing generation
‚Ä¢ Crystal-clear error messages
‚Ä¢ Backward compatible
‚Ä¢ Same performance as manual approach
‚Ä¢ Works with existing json_serializable workflow

*/
